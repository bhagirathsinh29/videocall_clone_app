{
    "sourceFile": "lib/src/pages/index.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1646392531882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646397840463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \n   @override\n   void dispose() {\n     // dispose input controller\n+\n     _channelController.dispose();\n     super.dispose();\n   }\n \n"
                }
            ],
            "date": 1646392531882,
            "name": "Commit-0",
            "content": "// ignore_for_file: prefer_const_constructors\n\nimport 'dart:async';\n\nimport 'package:agora_rtc_engine/rtc_engine.dart';\nimport 'package:flutter/material.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nimport './call.dart';\n\nclass IndexPage extends StatefulWidget {\n  @override\n  State<StatefulWidget> createState() => IndexState();\n}\n\nclass IndexState extends State<IndexPage> {\n  /// create a channelController to retrieve text value\n  final _channelController = TextEditingController();\n\n  /// if channel textField is validated to have error\n  bool _validateError = false;\n\n  ClientRole? _role = ClientRole.Broadcaster;\n\n  @override\n  void dispose() {\n    // dispose input controller\n    _channelController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Agora Flutter QuickStart'),\n      ),\n      body: Center(\n        child: Container(\n          padding: const EdgeInsets.symmetric(horizontal: 20),\n          height: 400,\n          child: Column(\n            children: <Widget>[\n              Row(\n                children: <Widget>[\n                  Expanded(\n                      child: TextField(\n                    controller: _channelController,\n                    decoration: InputDecoration(\n                      errorText:\n                          _validateError ? 'Channel name is mandatory' : null,\n                      border: UnderlineInputBorder(\n                        borderSide: BorderSide(width: 1),\n                      ),\n                      hintText: 'Channel name',\n                    ),\n                  ))\n                ],\n              ),\n              Column(\n                children: [\n                  ListTile(\n                    title: Text(ClientRole.Broadcaster.toString()),\n                    leading: Radio(\n                      value: ClientRole.Broadcaster,\n                      groupValue: _role,\n                      onChanged: (ClientRole? value) {\n                        setState(() {\n                          _role = value;\n                        });\n                      },\n                    ),\n                  ),\n                  ListTile(\n                    title: Text(ClientRole.Audience.toString()),\n                    leading: Radio(\n                      value: ClientRole.Audience,\n                      groupValue: _role,\n                      onChanged: (ClientRole? value) {\n                        setState(() {\n                          _role = value;\n                        });\n                      },\n                    ),\n                  )\n                ],\n              ),\n              Padding(\n                padding: const EdgeInsets.symmetric(vertical: 20),\n                child: Row(\n                  children: <Widget>[\n                    Expanded(\n                      child: ElevatedButton(\n                        onPressed: onJoin,\n                        child: Text('Join'),\n                        style: ButtonStyle(\n                            backgroundColor:\n                                MaterialStateProperty.all(Colors.blueAccent),\n                            foregroundColor:\n                                MaterialStateProperty.all(Colors.white)),\n                      ),\n                    ),\n                    // Expanded(\n                    //   child: RaisedButton(\n                    //     onPressed: onJoin,\n                    //     child: Text('Join'),\n                    //     color: Colors.blueAccent,\n                    //     textColor: Colors.white,\n                    //   ),\n                    // )\n                  ],\n                ),\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> onJoin() async {\n    // update input validation\n    setState(() {\n      _channelController.text.isEmpty\n          ? _validateError = true\n          : _validateError = false;\n    });\n    if (_channelController.text.isNotEmpty) {\n      // await for camera and mic permissions before pushing video page\n      await _handleCameraAndMic(Permission.camera);\n      await _handleCameraAndMic(Permission.microphone);\n      // push video page with given channel name\n      await Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) => CallPage(\n            channelName: _channelController.text,\n            role: _role,\n          ),\n        ),\n      );\n    }\n  }\n\n  Future<void> _handleCameraAndMic(Permission permission) async {\n    final status = await permission.request();\n    print(status);\n  }\n}\n"
        }
    ]
}