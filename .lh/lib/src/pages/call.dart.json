{
    "sourceFile": "lib/src/pages/call.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1646392471439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646392683175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,12 +114,14 @@\n     final List<StatefulWidget> list = [];\n     if (widget.role == ClientRole.Broadcaster) {\n       list.add(RtcLocalView.SurfaceView());\n     }\n-    _users.forEach((int uid) => list.add(RtcRemoteView.SurfaceView(\n-          uid: uid,\n-          channelId: \"\",\n-        )));\n+    for (var uid in _users) {\n+      list.add(RtcRemoteView.SurfaceView(\n+        uid: uid,\n+        channelId: \"\",\n+      ));\n+    }\n     return list;\n   }\n \n   /// Video view wrapper\n"
                },
                {
                    "date": 1646397972984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n import 'dart:async';\n \n import 'package:agora_rtc_engine/rtc_engine.dart';\n import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;\n"
                },
                {
                    "date": 1646398839095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n \n import '../utils/settings.dart';\n \n class CallPage extends StatefulWidget {\n+  \n   /// non-modifiable channel name of the page\n   final String? channelName;\n \n   /// non-modifiable client role of the page\n@@ -22,8 +23,10 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n+    late AgoraClient _client;\n+\n   final _users = <int>[];\n   final _infoStrings = <String>[];\n   bool muted = false;\n   late RtcEngine _engine;\n@@ -221,9 +224,33 @@\n             shape: CircleBorder(),\n             elevation: 2.0,\n             fillColor: Colors.white,\n             padding: const EdgeInsets.all(12.0),\n+          ),\n+          widget.disableVideoButtonChild != null\n+        ? RawMaterialButton(\n+            onPressed: () => widget.client.sessionController.toggleCamera(),\n+            child: widget.disableVideoButtonChild,\n           )\n+        : RawMaterialButton(\n+            onPressed: () => widget.client.sessionController.toggleCamera(),\n+            child: Icon(\n+              widget.client.sessionController.value.isLocalVideoDisabled\n+                  ? Icons.videocam_off\n+                  : Icons.videocam,\n+              color: widget.client.sessionController.value.isLocalVideoDisabled\n+                  ? Colors.white\n+                  : Colors.blueAccent,\n+              size: 20.0,\n+            ),\n+            shape: CircleBorder(),\n+            elevation: 2.0,\n+            fillColor:\n+                widget.client.sessionController.value.isLocalVideoDisabled\n+                    ? Colors.blueAccent\n+                    : Colors.white,\n+            padding: const EdgeInsets.all(12.0),\n+          )\n         ],\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1646399058764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n-\n import 'dart:async';\n \n import 'package:agora_rtc_engine/rtc_engine.dart';\n import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;\n import 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;\n+import 'package:agora_uikit/agora_uikit.dart';\n import 'package:flutter/material.dart';\n \n import '../utils/settings.dart';\n \n class CallPage extends StatefulWidget {\n-  \n   /// non-modifiable channel name of the page\n   final String? channelName;\n \n   /// non-modifiable client role of the page\n@@ -23,9 +22,10 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n-    late AgoraClient _client;\n+  late AgoraClient client;\n+  late Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n   bool muted = false;\n@@ -225,32 +225,31 @@\n             elevation: 2.0,\n             fillColor: Colors.white,\n             padding: const EdgeInsets.all(12.0),\n           ),\n-          widget.disableVideoButtonChild != null\n-        ? RawMaterialButton(\n-            onPressed: () => widget.client.sessionController.toggleCamera(),\n-            child: widget.disableVideoButtonChild,\n-          )\n-        : RawMaterialButton(\n-            onPressed: () => widget.client.sessionController.toggleCamera(),\n-            child: Icon(\n-              widget.client.sessionController.value.isLocalVideoDisabled\n-                  ? Icons.videocam_off\n-                  : Icons.videocam,\n-              color: widget.client.sessionController.value.isLocalVideoDisabled\n-                  ? Colors.white\n-                  : Colors.blueAccent,\n-              size: 20.0,\n-            ),\n-            shape: CircleBorder(),\n-            elevation: 2.0,\n-            fillColor:\n-                widget.client.sessionController.value.isLocalVideoDisabled\n-                    ? Colors.blueAccent\n-                    : Colors.white,\n-            padding: const EdgeInsets.all(12.0),\n-          )\n+          disableVideoButtonChild != null\n+              ? RawMaterialButton(\n+                  onPressed: () => client.sessionController.toggleCamera(),\n+                  child: disableVideoButtonChild,\n+                )\n+              : RawMaterialButton(\n+                  onPressed: () => client.sessionController.toggleCamera(),\n+                  child: Icon(\n+                    client.sessionController.value.isLocalVideoDisabled\n+                        ? Icons.videocam_off\n+                        : Icons.videocam,\n+                    color: client.sessionController.value.isLocalVideoDisabled\n+                        ? Colors.white\n+                        : Colors.blueAccent,\n+                    size: 20.0,\n+                  ),\n+                  shape: CircleBorder(),\n+                  elevation: 2.0,\n+                  fillColor: client.sessionController.value.isLocalVideoDisabled\n+                      ? Colors.blueAccent\n+                      : Colors.white,\n+                  padding: const EdgeInsets.all(12.0),\n+                )\n         ],\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1646399512142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n }\n \n class _CallPageState extends State<CallPage> {\n   late AgoraClient client;\n-  late Widget? disableVideoButtonChild;\n+  Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n   bool muted = false;\n"
                },
                {
                    "date": 1646405390925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n-  late AgoraClient client;\n+   AgoraClient client?;\n   Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n@@ -43,8 +43,9 @@\n \n   @override\n   void initState() {\n     super.initState();\n+    client.sessionController.toggleVisible();\n     // initialize agora sdk\n     initialize();\n   }\n \n"
                },
                {
                    "date": 1646712840893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n-   AgoraClient client?;\n+  late AgoraClient client;\n   Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n"
                },
                {
                    "date": 1646712979231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n-  late AgoraClient client;\n+  AgoraClient? client;\n   Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n@@ -43,9 +43,9 @@\n \n   @override\n   void initState() {\n     super.initState();\n-    client.sessionController.toggleVisible();\n+    client?.sessionController.toggleVisible();\n     // initialize agora sdk\n     initialize();\n   }\n \n@@ -228,27 +228,28 @@\n             padding: const EdgeInsets.all(12.0),\n           ),\n           disableVideoButtonChild != null\n               ? RawMaterialButton(\n-                  onPressed: () => client.sessionController.toggleCamera(),\n+                  onPressed: () => client?.sessionController.toggleCamera(),\n                   child: disableVideoButtonChild,\n                 )\n               : RawMaterialButton(\n-                  onPressed: () => client.sessionController.toggleCamera(),\n+                  onPressed: () => client?.sessionController.toggleCamera(),\n                   child: Icon(\n-                    client.sessionController.value.isLocalVideoDisabled\n+                    client!.sessionController.value.isLocalVideoDisabled\n                         ? Icons.videocam_off\n                         : Icons.videocam,\n-                    color: client.sessionController.value.isLocalVideoDisabled\n+                    color: client!.sessionController.value.isLocalVideoDisabled\n                         ? Colors.white\n                         : Colors.blueAccent,\n                     size: 20.0,\n                   ),\n                   shape: CircleBorder(),\n                   elevation: 2.0,\n-                  fillColor: client.sessionController.value.isLocalVideoDisabled\n-                      ? Colors.blueAccent\n-                      : Colors.white,\n+                  fillColor:\n+                      client!.sessionController.value.isLocalVideoDisabled\n+                          ? Colors.blueAccent\n+                          : Colors.white,\n                   padding: const EdgeInsets.all(12.0),\n                 )\n         ],\n       ),\n"
                },
                {
                    "date": 1646713133165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   _CallPageState createState() => _CallPageState();\n }\n \n class _CallPageState extends State<CallPage> {\n-  AgoraClient? client;\n+  late AgoraClient client;\n   Widget? disableVideoButtonChild;\n \n   final _users = <int>[];\n   final _infoStrings = <String>[];\n@@ -43,9 +43,9 @@\n \n   @override\n   void initState() {\n     super.initState();\n-    client?.sessionController.toggleVisible();\n+    client.sessionController.toggleVisible();\n     // initialize agora sdk\n     initialize();\n   }\n \n@@ -228,28 +228,27 @@\n             padding: const EdgeInsets.all(12.0),\n           ),\n           disableVideoButtonChild != null\n               ? RawMaterialButton(\n-                  onPressed: () => client?.sessionController.toggleCamera(),\n+                  onPressed: () => client.sessionController.toggleCamera(),\n                   child: disableVideoButtonChild,\n                 )\n               : RawMaterialButton(\n-                  onPressed: () => client?.sessionController.toggleCamera(),\n+                  onPressed: () => client.sessionController.toggleCamera(),\n                   child: Icon(\n-                    client!.sessionController.value.isLocalVideoDisabled\n+                    client.sessionController.value.isLocalVideoDisabled\n                         ? Icons.videocam_off\n                         : Icons.videocam,\n-                    color: client!.sessionController.value.isLocalVideoDisabled\n+                    color: client.sessionController.value.isLocalVideoDisabled\n                         ? Colors.white\n                         : Colors.blueAccent,\n                     size: 20.0,\n                   ),\n                   shape: CircleBorder(),\n                   elevation: 2.0,\n-                  fillColor:\n-                      client!.sessionController.value.isLocalVideoDisabled\n-                          ? Colors.blueAccent\n-                          : Colors.white,\n+                  fillColor: client.sessionController.value.isLocalVideoDisabled\n+                      ? Colors.blueAccent\n+                      : Colors.white,\n                   padding: const EdgeInsets.all(12.0),\n                 )\n         ],\n       ),\n"
                }
            ],
            "date": 1646392471439,
            "name": "Commit-0",
            "content": "import 'dart:async';\n\nimport 'package:agora_rtc_engine/rtc_engine.dart';\nimport 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;\nimport 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;\nimport 'package:flutter/material.dart';\n\nimport '../utils/settings.dart';\n\nclass CallPage extends StatefulWidget {\n  /// non-modifiable channel name of the page\n  final String? channelName;\n\n  /// non-modifiable client role of the page\n  final ClientRole? role;\n\n  /// Creates a call page with given channel name.\n  const CallPage({Key? key, this.channelName, this.role}) : super(key: key);\n\n  @override\n  _CallPageState createState() => _CallPageState();\n}\n\nclass _CallPageState extends State<CallPage> {\n  final _users = <int>[];\n  final _infoStrings = <String>[];\n  bool muted = false;\n  late RtcEngine _engine;\n\n  @override\n  void dispose() {\n    // clear users\n    _users.clear();\n    // destroy sdk\n    _engine.leaveChannel();\n    _engine.destroy();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    // initialize agora sdk\n    initialize();\n  }\n\n  Future<void> initialize() async {\n    if (APP_ID.isEmpty) {\n      setState(() {\n        _infoStrings.add(\n          'APP_ID missing, please provide your APP_ID in settings.dart',\n        );\n        _infoStrings.add('Agora Engine is not starting');\n      });\n      return;\n    }\n\n    await _initAgoraRtcEngine();\n    _addAgoraEventHandlers();\n    await _engine.enableWebSdkInteroperability(true);\n    VideoEncoderConfiguration configuration = VideoEncoderConfiguration();\n    configuration.dimensions = VideoDimensions(width: 1920, height: 1080);\n    await _engine.setVideoEncoderConfiguration(configuration);\n    await _engine.joinChannel(Token, widget.channelName!, null, 0);\n  }\n\n  /// Create agora sdk instance and initialize\n  Future<void> _initAgoraRtcEngine() async {\n    _engine = await RtcEngine.create(APP_ID);\n    await _engine.enableVideo();\n    await _engine.setChannelProfile(ChannelProfile.LiveBroadcasting);\n    await _engine.setClientRole(widget.role!);\n  }\n\n  /// Add agora event handlers\n  void _addAgoraEventHandlers() {\n    _engine.setEventHandler(RtcEngineEventHandler(error: (code) {\n      setState(() {\n        final info = 'onError: $code';\n        _infoStrings.add(info);\n      });\n    }, joinChannelSuccess: (channel, uid, elapsed) {\n      setState(() {\n        final info = 'onJoinChannel: $channel, uid: $uid';\n        _infoStrings.add(info);\n      });\n    }, leaveChannel: (stats) {\n      setState(() {\n        _infoStrings.add('onLeaveChannel');\n        _users.clear();\n      });\n    }, userJoined: (uid, elapsed) {\n      setState(() {\n        final info = 'userJoined: $uid';\n        _infoStrings.add(info);\n        _users.add(uid);\n      });\n    }, userOffline: (uid, elapsed) {\n      setState(() {\n        final info = 'userOffline: $uid';\n        _infoStrings.add(info);\n        _users.remove(uid);\n      });\n    }, firstRemoteVideoFrame: (uid, width, height, elapsed) {\n      setState(() {\n        final info = 'firstRemoteVideo: $uid ${width}x $height';\n        _infoStrings.add(info);\n      });\n    }));\n  }\n\n  /// Helper function to get list of native views\n  List<Widget> _getRenderViews() {\n    final List<StatefulWidget> list = [];\n    if (widget.role == ClientRole.Broadcaster) {\n      list.add(RtcLocalView.SurfaceView());\n    }\n    _users.forEach((int uid) => list.add(RtcRemoteView.SurfaceView(\n          uid: uid,\n          channelId: \"\",\n        )));\n    return list;\n  }\n\n  /// Video view wrapper\n  Widget _videoView(view) {\n    return Expanded(child: Container(child: view));\n  }\n\n  /// Video view row wrapper\n  Widget _expandedVideoRow(List<Widget> views) {\n    final wrappedViews = views.map<Widget>(_videoView).toList();\n    return Expanded(\n      child: Row(\n        children: wrappedViews,\n      ),\n    );\n  }\n\n  /// Video layout wrapper\n  Widget _viewRows() {\n    final views = _getRenderViews();\n    switch (views.length) {\n      case 1:\n        return Container(\n            child: Column(\n          children: <Widget>[_videoView(views[0])],\n        ));\n      case 2:\n        return Container(\n            child: Column(\n          children: <Widget>[\n            _expandedVideoRow([views[0]]),\n            _expandedVideoRow([views[1]])\n          ],\n        ));\n      case 3:\n        return Container(\n            child: Column(\n          children: <Widget>[\n            _expandedVideoRow(views.sublist(0, 2)),\n            _expandedVideoRow(views.sublist(2, 3))\n          ],\n        ));\n      case 4:\n        return Container(\n            child: Column(\n          children: <Widget>[\n            _expandedVideoRow(views.sublist(0, 2)),\n            _expandedVideoRow(views.sublist(2, 4))\n          ],\n        ));\n      default:\n    }\n    return Container();\n  }\n\n  /// Toolbar layout\n  Widget _toolbar() {\n    if (widget.role == ClientRole.Audience) return Container();\n    return Container(\n      alignment: Alignment.bottomCenter,\n      padding: const EdgeInsets.symmetric(vertical: 48),\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          RawMaterialButton(\n            onPressed: _onToggleMute,\n            child: Icon(\n              muted ? Icons.mic_off : Icons.mic,\n              color: muted ? Colors.white : Colors.blueAccent,\n              size: 20.0,\n            ),\n            shape: CircleBorder(),\n            elevation: 2.0,\n            fillColor: muted ? Colors.blueAccent : Colors.white,\n            padding: const EdgeInsets.all(12.0),\n          ),\n          RawMaterialButton(\n            onPressed: () => _onCallEnd(context),\n            child: Icon(\n              Icons.call_end,\n              color: Colors.white,\n              size: 35.0,\n            ),\n            shape: CircleBorder(),\n            elevation: 2.0,\n            fillColor: Colors.redAccent,\n            padding: const EdgeInsets.all(15.0),\n          ),\n          RawMaterialButton(\n            onPressed: _onSwitchCamera,\n            child: Icon(\n              Icons.switch_camera,\n              color: Colors.blueAccent,\n              size: 20.0,\n            ),\n            shape: CircleBorder(),\n            elevation: 2.0,\n            fillColor: Colors.white,\n            padding: const EdgeInsets.all(12.0),\n          )\n        ],\n      ),\n    );\n  }\n\n  /// Info panel to show logs\n  Widget _panel() {\n    return Container(\n      padding: const EdgeInsets.symmetric(vertical: 48),\n      alignment: Alignment.bottomCenter,\n      child: FractionallySizedBox(\n        heightFactor: 0.5,\n        child: Container(\n          padding: const EdgeInsets.symmetric(vertical: 48),\n          child: ListView.builder(\n            reverse: true,\n            itemCount: _infoStrings.length,\n            itemBuilder: (BuildContext context, int index) {\n              if (_infoStrings.isEmpty) {\n                return Text(\n                    \"null\"); // return type can't be null, a widget was required\n              }\n              return Padding(\n                padding: const EdgeInsets.symmetric(\n                  vertical: 3,\n                  horizontal: 10,\n                ),\n                child: Row(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    Flexible(\n                      child: Container(\n                        padding: const EdgeInsets.symmetric(\n                          vertical: 2,\n                          horizontal: 5,\n                        ),\n                        decoration: BoxDecoration(\n                          color: Colors.yellowAccent,\n                          borderRadius: BorderRadius.circular(5),\n                        ),\n                        child: Text(\n                          _infoStrings[index],\n                          style: TextStyle(color: Colors.blueGrey),\n                        ),\n                      ),\n                    )\n                  ],\n                ),\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _onCallEnd(BuildContext context) {\n    Navigator.pop(context);\n  }\n\n  void _onToggleMute() {\n    setState(() {\n      muted = !muted;\n    });\n    _engine.muteLocalAudioStream(muted);\n  }\n\n  void _onSwitchCamera() {\n    _engine.switchCamera();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Agora Flutter QuickStart'),\n      ),\n      backgroundColor: Colors.black,\n      body: Center(\n        child: Stack(\n          children: <Widget>[\n            _viewRows(),\n            _panel(),\n            _toolbar(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}